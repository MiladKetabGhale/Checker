\documentclass{llncs}
\usepackage{bussproofs}
\usepackage{holtexbasic,url,amsmath,environ}
\renewcommand{\HOLTokenTurnstile}{\ensuremath{\vdash\!\!}}
\renewcommand{\HOLinline}[1]{\ensuremath{#1}}
\renewcommand{\HOLKeyword}[1]{\mathsf{#1}}
\renewcommand{\HOLConst}[1]{{\textsf{\upshape #1}}}
\renewcommand{\HOLTyOp}[1]{\textsf{\itshape #1}}
\renewcommand{\HOLSymConst}[1]{\HOLConst{#1}}
\renewcommand{\HOLTokenBar}{\ensuremath{\mathtt{|}}}
\NewEnviron{holthmenv}{
  \begin{equation*}
  \begin{array}[t]{l}
  \BODY
  \end{array}
  \end{equation*}}
\newcommand{\TODO}[1]{{\bf TODO:} #1}
\begin{document}
\title{Verified Certificate Checking for Counting Votes}
\author{
Milad~K.~Ghale\inst{1}\and
Dirk~Pattinson\inst{1}\and
Ramana~Kumar\inst{2}}
\institute{Australian National University\and
Data61, CSIRO and UNSW}
\maketitle
\begin{abstract}
We approach electronic vote counting as a certified computation where for each execution of the counting protocol, a certificate accompanies the end result. The certificate can then be independently checked for validity by a checker. We introduce a new framework for verifying electronic vote counting results that are based on the Single Transferable Vote scheme (STV). We demonstrate the process by formalizing an STV counting protocol and its certificates inside the theorem prover HOL. Then we obtain a verified checker inside HOL that scrutinizes formal certificates. By means of a built-in provably correct mechanism, we translate the checker from HOL into CakeML. Combining the translated checker, translated parser, and the I/O aspects inside CakeML environment, we prove that the combination performs the computation for checking real certificates correctly down to the machine code. Therefore, we achieve an extraordinary level of verification for deciding which election results are authentic. Besides requiring a low amount of labor, our formalization is modular in that it can be easily adapted to accommodate other STV schemes. Furthermore, the executable extracted from CakeML is capable of handling real size elections.

\end{abstract}
\section{Introduction}\label{sec:intro}
Members of the general public outsource the task of vote counting of an election in a democratic system to authorities in order to safeguard their preferences. Therefore    correct, publicly verifiable, transparent election count is a key constituent of establishing trustworthiness in the final outcome. Vote counting methods currently in use fail to meet such expectations. In hand counting methods, to provide the public with some evidence for the process, scrutiny sheets are published. Also independent scrutineers are welcomed to monitor the counting process. However scrutiny sheets are inadequate as costly mistakes have happened in the traditional hand counting methods\cite{}. As a result, computers have come to perform the computation for elections with different counting algorithms including the Single Transferable Vote scheme. These program merely output a final result where winners of the election are announced. Moreover, their source code is kept secret under the excuse of \lq\lq commercial in confidence\rq\rq. On the other hand, elections with STV scheme are complex and have corner cases which are left open to interpretation and, therefore, implementations. Hence efforts to reproduce the same results output by the commercial programs is usually unsuccessful. Consequently the public has no choice other than having plain faith in numerous components employed throughout this process. 

 


Our approach combines the concept of certifying programs with the theorem proving to address the probelm. A cost-effective solution for verification of vote counting programs is to modify them in a way that upon each execution of the program, a certificate is produced which stands as a correctness witness for the output result. A checker can, then, independently of the tools used to produce the certificates, checks them for correctness. Validation of the program therefore reduces to verification of the certificate checker. 



Here, we demonstrate how to carry the task out for STV elections. To this end, we take four steps. First, we formalise  vote counting algorithm  inside the theorem prover HOL as a sequence of logical rule applications to stages of the count. Stages of the count, are formalised as typing judgements which are of two kind; non-final and final. The former is constituted of six components that put together provide all the necessary information to know what the current status of the count is. It informs the scrutineers of the ballots which (possibly) need to be counted, tally of each candidate, pile of the votes allocated to each candidate according to the preferences, list of candidates whose votes may be distributed later, and list of elected and continuing candidates at this stage. The latter judgement is a terminal stage of the process whereby winners of the election are announced. A list of judgements is called a \emph{formal certificate}.



Moreover, The election protocol implicitly specifies steps for advancing the counting process. These steps which tell us when and how to move from one stage of the count (judgement) to another are formalised as logical rules. These rules have side conditions that must be met before such transitions can happen. Side conditions are, essentially, the formal counterpart of the protocol laid down by the legislation, and are expressed by standalone HOL predicates. By satisfying these side conditions, one makes sure that the process has proceeded in accordance to the protocol of the election. We shall refer to such assertions as predicative definitions or \emph{specification}. Finally, We specify the checker a disjunction of the predicative counting rules. Therefore to validate a given formal certificate, the checker merely needs to verify if each two consecutive list elements match against a premise and conclusion of a legitimate rule instance application.



Second, We have HOL functions defined for the purpose of performing computation with. Some of these functions are auxiliary computational components which we use to assert computational counterparts of the predicative counting rules. In essence, each computational counting rule is expressed as a conjunction of some of these auxiliary definitions. The computational checker, which certifies a given formal certificate, is formalised a disjunction of the computational counting rules.



Third, we establish correspondence between the predicative definitions and their respective computational definitions. All of the functions which we have defined in the second step and did not exist in HOL libraries are proven correct with respect to their specification laid down in the first step. Therefore, we prove that the computational checker validates a formal certificate if and only if its specification is met. Hence, we only validate a formal certificate when and if it has been obtained in accordance to steps specified by the protocol of the election.



Our fourth step is extraction of executable that is correct down to the machine code. To accomplish this final step, we first translate our HOL definitions into CakeML equivalent definitions by calling the built-in \textsf{translate} function. Therefore we are able to uplift whatever properties proved for our HOL computational definitions to CakeML embedded equivalent functions. As a result the computational behaviour of the CakeML translated functions on a formal certificate is the same as their original HOL counterparts. Furthermore, to perform computation on an actual certificate, we combine our parser defined in HOL with I/O functions of CakeML, and the computational checker. These are put together as a deeply embedded CakeML function, named \textsf{check\_count}. The behaviour of this function is proven correct with respect to a top-level specification. Consequently, we come to verify that \textsf{check\_count} is extensionally equivalent to the computational checker in the HOL. Hence, we validate an actual certificate if and only if its corresponding  formal certificate is valid. Finally we obtain executable code which behaves on the machine level as its source program does on the formal HOL level.




Our formalization has some advantages. We accomplish the phenomenal degree of verification down to machine code  in a very cost-effective way.Also all of the steps are taken inside verified environments. We do not outsource any part of our task to other sources such as third party theorem provers or code verifiers through untrusted, unverified translation methods. Moreover, it enjoys modularity. Most of STV algorithms differ mainly in some small aspects. On the other hand, we capture the protocol in terms of stand-alone HOL assertions. Thereofore to formalise other STV algorithms, we essentially need to modify specific part of one or some rules and then discharge the related proofs rather than throwing the entire formalization away to strat from the scratch. Furhtermore, our work extends beyond mere theorem proving as the executable extracted from CakeML is capable of dealing with real size elections.





\noindent\textbf{Related Work.} Alkassar et al~\cite{EAlk} combine certified computation and theorem proving with methods of code verification to establish a framework for validation of certifying algorithms. First they implement algorithms in C language. Then by using the VCC tool~\cite{}, they obtain some pre- and postconditions, which are next generalized syntatically and then implemented in the Isabella theorem prover to be discharged. Even though this metohd introduces a uniform platform for dealing with certifiying algorithms, the user has to trust the VCC tool, and there is duplication of effort in that one has to generalize the conditions imposed by the VCC and then implement them manually in Isabella to prove. To ameliorate this disadvantage, Noschinski et al~\cite{LNos} replaced the intermediate step where VCC is invoked by the AutoCorres~\cite{DGre} verifier which provably correctly translates (part of) C language into Isabella in a semantic preserving manner. Although the latter method is much superior in the degree of the verification achieved, one can not guarantee that the machine code behaves in the same way as its top-level C implementation. On the other hand, in context of vote counting verification, merely certifying implementations exist~\cite{DPat,DPati,MKet}. For STV, in particular, Ghale et al~\cite{MKet} and Pattinson et al~\cite{DPati} verify some STV schemes inside Coq and output a certificate for each input upon every execution of the extracted Haskell program. Nonetheless, they do not provide any verified checker to independently scrutinize the certificate for authenticity.

\section{The Protocol and Its HOL Formalization}
STV is an election scheme used in multi-seated constituencies and is designed to reflect the proportional preferences of voters in that district for competing candidates. The preference is expressed by ordering candidates on each ballot. Then the count proceeds by assigning the value of the ballot to the most preferred continuing candidate. A continuing candidate is one who has neither been elected nor eliminated from the initial list of competing candidates. When a candidate is not continuing any more, they are not considered in the preferences of ballots any further. Additionally, transfer of ballots of the elected or eliminated candidates may occur until all vacancies are filled.



There are various versions of STV. They mainly differ in how  and when ballots are transferred or candidates are elected , the transfer value of ballots of elected candidates, and the tie breaking methods for determining which candidate is the weakest to exclude. Here, we particularly deal with a STV called ANU\_Union. It is similar to the STV used in the Australian Senate election but with three distinctive properties:
\begin{description}
\item[Step-by-step surplus transfer.] Surplus
votes of already elected candidates, who are awaiting for their
surplus to be transferred, are dealt with, one at a time, in order of
first preferences.
\item[Electing after each
transfer.] After each transfer of values, candidates that reach
the quota are elected immediately.
\item[Fractional transfer.] The
value of vote transfer is a fractional number determined by a
specific formula.\end{description}


The protocol proceeds as follows.
\begin{center}
\begin{enumerate} \item decide which ballots are
\emph{formal}.  \item determine what the quota exactly is.  \item
count the first preference for each \emph{formal} ballot paper and
place the vote in the pile of the  votes of the preferred candidate.
\item if there are vacancies, any candidate that reaches
the quota is declared elected.  \item if all
the vacancies have been filled, counting terminates and the result
is announced.
\item if the number of vacancies exceeds the number of continuing
candidates, all of them are declared elected and the result is
announced.
\item if there are still vacancies and all ballots are counted, and
there is
an elected candidate with surplus,
go to step $8$ otherwise go to step $9$.
\item In case of surplus
votes, transfer them to the next continuing preference appearing on
each of those votes at a fractional value according to the following
formula:

\begin{equation}  \label{eq:tv}
\mbox{new value} = \frac{\mbox{number of votes of elected
candidate} - \mbox{quota}}{\mbox{number of votes of elected
candidate}}
\end{equation}

\noindent
Subsequent transfer values are computed as the product of the current value with previous transfer value.
\item if there are still vacancies and all ballots are counted, and
all surplus votes are transferred, choose the candidate with the
least amount of votes and exclude them from the list of continuing
candidates. Also transfer all of their votes according to the next
preference appearing on each of the votes in his pile. The transfer
value of the ballots shall remain unchanged.
\item if there is more than one elected candidate, first transfer
the surplus of the candidate who has the largest surplus. If after a
transfer of surplus, a continuing candidate exceeds the quota, declare them elected and transfer their surplus, only after all of the earlier elected candidates' surpluses have been dealt with.
\item at transfer stage, candidates who are already elected or eliminated receive no vote.
\end{enumerate}
\end{center}

\subsection{The HOL Formalization}
The counting process is constituted of some key components, all of which appear in a comprehensive certificate of the count:
\begin{enumerate}
\item candidates competing in the election
\item number of vacancies
\item quota of the election
\item stages of the counting (or computation)
\end{enumerate}
Stages of the count are symbolized representations of necessary information which one needs to know in order to understand how the procedure of the count has exactly advanced. We encapsulate the concept of states of the count in terms of typing judgements with two value constructors named \textsf{NonFinal} and \textsf{Final}. The latter one is used for expressing a terminal state of the count where winners of the election are declared. More specifically, a final judgement asserts the following.
\begin{definition}[Final Judgement]
\begin{small}
In an election, assuming we have a quota $qu$, initial number of vacancies $st$, and a list $\mathcal{L}$ of all candidates competing in the election, \textsf{Final}$(w)$ is a final stage of the computation, where $w$ is the final list consisting of all of the declared elected candidates.
\end{small}
\begin{center}
$qu,st,\mathcal{L}   \vdash  \mathsf{Final}(w)$
\end{center}
\end{definition}
Furthermore, before reaching to a final stage in any count, the process may go through several intermediate satges where, for example, counting of ballots happens or some candidates are elected or eliminated. To formalize such non-final stages, we introduce the constructor \textsf{Non-Final}. At every non-final stage of the counting, we need to know that if there are ballots to be counted, how the votes have been distributed up to now, what is the tally of each candidate, and if any candidate was elected or eliminated from the election. Therefore, for stages of the count to thoroughly inform the scrutineers of how the situation of the count is at the moment, it is necessary and sufficient to contain the following components:
\begin{enumerate}
\item the (possibly) uncounted ballots
\item the tally of votes of each candidate
\item the set of ballots that have been counted for each individual candidate.
\item a group of candidates already elected who have exceeded the quota
\item a group of candidates called \emph{elected} candidates
\item a group of candidates called \emph{continuing} candidates
\end{enumerate}
\begin{definition}[Non-Final Judgement]
\begin{small}
In an election, assuming we have a quota $qu$, initial number of vacancies $st$, and a list $\mathcal{L}$ of all candidates competing in the election, \textsf{NonFinal}$(ba,t,p,bl,e,h)$ is an intermediate stage of the computation, where $ba$ is the list of uncounted ballots at this point, $t$ is the tally list recording the number of votes of each candidate has received up to this point, $p$ is the pile list of votes assigned to each candidate, $bl$ is the list of elected whose surplus have not yet been transferred, $e$ is the list of elected candidates by this point, and $h$ is the list of continuing candidates up to this stage.
\end{small}
\begin{center}
$qu,st,\mathcal{L}   \vdash  \mathsf{NonFinal}(ba,t,p,bl,e,h)$ 
\end{center}
\end{definition}
Definition~\ref{jud:hol} specifies the exact HOL encoding of the sates of the computation. We should note that the use of lists, instead of sets, for ballots, and continuing or elected candidates is simply for the convenience of formalisation in a theorem prover. But the counting rules ,defined shortly afterwards, make no essential use of this representation. Furthermore, by choosing to formalize the tally and pile as lists rather than functions operating on the list of candidates, judgements become an instance of the equality type class which we use later on in specification and reasoning on counting rules. Additionally, this formulation reduces the gap between an actual certificate and its abstract syntactic representation which we refer to as a \emph{formal certificate that is simply a list of judgements}.
\begin{definition}\label{jud:hol}
  Assume \HOLty{:ballots}, \HOLty{:tallies}, and \HOLty{:piles} are type synonyms for
  \HOLty[-ballots,-alist]{:ballots},
  \HOLty[-tallies,-alist]{:tallies}, and
  \HOLty[-piles,-alist]{:piles} respectively.
\begin{holthmenv}
\HOLthm[width=80]{CheckerSpec.datatype_judgement}
\end{holthmenv}
\end{definition}

As a formal certificate is constituted of judgements each representing a state of the count, to check it for correctness, we need to know how transition between each two consecutive judgements in the list has occurred. According to clauses of the protocol, there are steps that one may only legitimately take to move from one state of the count to the next. The steps, which we call the counting rules, are composed of some side conditions meant as constraints on how and when one can legally apply a rule. We express these constraints by means of auxiliary predicative assertions. There are also implicit conditions hidden in the protocol clauses. For example, we expect a valid certificate to have no duplication in the list of elected or continuing candidates, and every candidate must have only one tally and one pile at every non-final judgement. Therefore, we need to define some auxiliary predicates to check such subtleties implicitly existing in the protocol.  Conjunction of these auxiliary definitions formalises individual counting rules in HOL.


The second step is to define functions in HOL which are meant to be the computational counterparts of the HOL specification in the step above. Conjunction of appropriate computational definitions constitutes the computational definition for individual counting rules. These functions are later translated by the built-in mechanisms of CakeML for the purpose of actual computations on an actual certificate.


The last step is to prove equivalence of the HOL specification and the computational assertions. By establishing this correspondence, we demonstrate that the computational parts meet the expectation of their specification. We therefore validate a formal certificate if and when it is indeed valid. To show how the process concretely proceeds, we indicate the aformentioned phases put together for the case of \emph{elimination} rule. However, we should note that our actual formalisation seperates the three steps to enhance readability and clearance of the encoding.

\subsection{The Case of the Elimination Rule}
There are implicit conditions in the protocol. For example, the name of each candidate appears only once in the initial list of competing candidates. Also no one is assigned with more than a single pile and a unique tally. Therefore for formalising the legislation, we define predicates that correspond to such implicit requirements. For instance, the predicate \textsf{Valid\_Init\_CandList} restricts legal initial lists of candidates to those which are non-empty and have no duplicate. 
\begin{holthmenv}
  \HOLthm[width=80]{CheckerSpec.Valid_Init_CandList_def}
\end{holthmenv}
Moreover, at every stage of the count, every candidate has exactly one tally and one pile. Therefore, if a judgement in a certificate meliciously allocates more than one tally to a single candidate, the bug is detected and the certificate rejected as invalid.  We express this condition by the following.
\begin{holthmenv}
  \HOLthm[width=80]{CheckerSpec.Valid_PileTally_def}
\end{holthmenv}
We also have the computational twins for both of the predicates above. Assume the lists $t$ and $l$ are given. Then the function \textsf{Valid\_PileTally\_dec1} decides if every first element of each pair in $t$ is a member of $l$.
\begin{holthmenv}
  \HOLthm[width=80]{Checker.Valid_PileTally_dec1_def}
\end{holthmenv}
Additionally, the function \textsf{Valid\_PileTally\_dec2} determins if each element of $l$ appears as the first component of a pair in $t$.
\begin{holthmenv}
  \HOLthm[width=80]{Checker.Valid_PileTally_dec2_def}
\end{holthmenv}
W prove that the formal specification \textsf{Valid\_PileTally\_def} enforces correctness of the function \textsf{Valid\_PileTally\_dec1}.
\begin{holthmenv}
  \HOLthm[width=80]{CheckerProof.PileTally_to_PileTally_DEC1}
\end{holthmenv}

Also the specification \textsf{Valid\_PileTally\_def} implies correctness of \textsf{Valid\_PileTally\_dec2} witnessed by the theorem below.
\begin{holthmenv}
  \HOLthm[width=80]{CheckerProof.PileTally_to_PileTally_DEC2}
\end{holthmenv}
Conversely, correctness of the computational definition \textsf{Valid\_PileTally\_dec1} and  \textsf{Valid\_PileTally\_dec2} entails their respective specifications. Therefore, we obtain a perfect equivalence between the specification and computational condition for tallies and piles to be distinctively allocated to candidates. 



Aside from the implicit conditions, \emph{elimination} has explicit constraints to meet for its legal applications. For example, item~9 of the protocl states that 
\begin{small}
\begin{center}
\begin{minipage}{10cm}
\emph{choose the candidate with the least amount of votes and exclude
them from the list of continuing candidates}.
\end{minipage}
\end{center}
\end{small}
So the difference between the continuing list of candidates in the premise of the rule with the one in the conclusion is that the weakest candidate is no longer a continuing candidate in the comclusion of the rule. The predicate \textsf{equal\_except} formally asserts when two lists are equal except for one exact element.
\begin{holthmenv}
  \HOLthm[width=80]{CheckerSpec.equal_except_def}
\end{holthmenv}
To compute when indeed two list match with the exception of one element, we define the function \textsf{equal\_except\_dec}.
\begin{holthmenv}
  \HOLthm[width=80]{Checker.equal_except_dec_def}
\end{holthmenv}
This function is proven to satisfy the specification laid down by \textsf{equal\_except} predicate.
\begin{holthmenv}
  \HOLthm[width=80]{CheckerProof.EQE_REMOVE_ONE_CAND}
\end{holthmenv}
Moreover, modulo extensional equality, the function \textsf{equal\_except\_dec} is unique.
 \begin{holthmenv}
  \HOLthm[width=80]{CheckerProof.EQE_IMP_REMOVE_ONE_CAND}
\end{holthmenv}
The fact that the candidate removed is the weakest, is established by another stand-alone assertion which is expressed as a conjunct of the elimination rule's defintion. Having defined the implicit and explicit side conditions in the definition of \emph{elimination}, we can present the formlisation of this rule in HOL as a predicate.
\begin{holthmenv}
  \HOLthm[width=80]{CheckerSpec.ELIM_CAND_def}
\end{holthmenv}

\textsf{ELIM\_CAND} is defined on three kind of input; a candidate, a triple composed of three fixed parameters which are the quota, vacancies, and the initial list of candidates, and two judgements one of which is the premise and the other is the conclusion of the rule. Each of the conjuncts corresponds to a condition specified in the definition~\ref{elim:rule}, as we already demonstrated it for a few cases. \textsf{ELIM\_CAND\_dec} is the computational realisation of the \textsf{ELIM\_CAND}.
\begin{holthmenv}
  \HOLthm[width=80]{Checker.ELIM_CAND_dec_def}
\end{holthmenv}
We already have demonstrated how the specification of the predicative assertions imply  correctness of the corresponding computational parts. By drawing on these theorems we obtain equivalence of the computational \textsf{ELIM\_CAND\_dec} with its specification \textsf{ELIM\_CAND}. The same procedure is followed to acheive formal specification,  computational definitions, and their correspondence for the rest of counting rules.

\subsection{The Checker formalisation}
To check a given formal certificate for correctness, we mainly need to validate if a transition from an element in the judgement list to the next element is legitimately doable by application of a rule. On the other hand, rules have been proven applicable only when they meet their respective specification. Since rules have some side conditions which make them distinct, this implies that at every stage actually only one of them applies. Therefore, we specify the correct transition-check to be a disjunction of the predicative counting rules.
\begin{holthmenv}
  \HOLthm[width=80]{CheckerSpec.valid_judgements_def}
\end{holthmenv}
 To compute correct transitions between consecutive formal certificate elements, we recursively call the disjunction of the computational counting rules.
\begin{holthmenv}
  \HOLthm[width=80]{Checker.valid_judgements_dec_def}
\end{holthmenv}
The specification \textsf{valid\_judgements} matches with its computational twin.
\begin{holthmenv}
  \HOLthm[width=80]{CheckerProof.valid_judgements_thm}
\end{holthmenv}
Note that we require the last judgement of a formal certificate to be of final type.
 Moreover, we impose the condition that the first element of a judgement be an \emph{intial} judgement. An intial judgement is one in which every candidates tally is intially set to zero, their piles are empty, and the backlog and the list of elected candidates are both emoty as well. For checking a formal certifcate we therefore first  certify if the the certificate starts at an initial stage. Then recursively we continue checking if transitions have happened correctly, and if the terminating state is a final one where winners are declared.
 \begin{holthmenv}
  \HOLthm[width=80]{CheckerSpec.valid_certificate_def}
\end{holthmenv}
  The above specification of the checker, therefore, corresponds to the following computational formal certificate checker.
 \begin{holthmenv}
  \HOLthm[width=80]{Checker.Check_Parsed_Certificate_def}
\end{holthmenv}
Hence a formal certificate is validated if and when it is valid according to the HOL specification of \textsf{valid\_certificate}. As we showed, the HOL specification is a formalisation of the mathematical specification. The mathematical specification is simply a symbolic representation of the counting protocol. Consequently, a formal certificate is validated if and only if it matches with the protocol.


\section{Translation into CakeML and Code Extraction}

\section{Experimental Results}
We have tested our approach against some of the past Australian
Legislative Assembly elections in ACT for years 2008 and 2012 (Figure\ref{ref;figure2})\footnote{Tests were conducted on one core of an Intel Core i7-7500U CPU~\@ 2.70GHz$\times$4 Ubuntu~16.4 LTS}. The certificates have been produced by the Haskell program extracted from our previous formalization of ANU\_Union STV in Coq~\cite{MKet}.
\begin{figure}
\centering
%\begin{tabu} to 0.86\textwidth {X[c] X[c] X[c] X[c] X[c] X[c]}
\begin{tabular}{|l |c |c |c |c |c|c|}
\hline
electoral & ballots& vacancies& candidates& time (sec)& certificate size (MB)&year\\
\hline
%\end{tabular}
%\begin{tabu} to 0.86\textwidth {X[l] | X[c]  | X[c] | X[c] | X[c] | X[c]}
%\begin{tabular}{c c c c c c}
Brindabella &$63334$&$5$&$19$&$86$&$54.4$&2008\\
Ginninderra &$60049$&$5$&$27$&$118$&83.0&2008\\
Molonglo &$88266$&$7$&$40$&$329$&211.2&2008\\
Brindabella&$63562$&$5$&$20$&$75$&74.5&2012\\
Ginninderra&$66076$&$5$&$28$&$191$&90.1&2012\\
Molonglo&$91534$&$7$&$27$&$286$&158.7&2012\\
\hline
\end{tabular}
\caption{ACT Legislative Assembly 2008 and 2012}
\label{ref;figure2}
\end{figure}
Moreover, we have studied behavior of our executable by examining it on certificates output on randomly generated ballots. There are two interesting prameters to study, namely varying the number of ballots and varying the length of each ballot. Figure~\ref{ref;figure3} depicts results on certificates where the number of candidates is fixed at 20, vacancies are 5, and the length of each ballot is 12. It appears that the complexity of the program in the number of ballots is quadratic. Also we keep the number of ballots, vacancies, and length of each ballot fixed at 100000, 1, and 10 respectively, in order to inspect the effect of increase in the length of each ballot (Figure~\ref{ref;figure4}). The complexity of the program seems to be linear with respect to this index. 
\begin{figure}
\centering
\begin{minipage}{.45\textwidth}
  \centering
\begin{tabular}{|l |c |c| c|}
\hline
ballots &certificate size& time (sec)\\
\hline
$400000$&$523.6$&$4224$\\
$200000$&$253.3$&$938$\\
$100000$&$131.1$&$461$\\
\hline
\end{tabular}
\caption{Varying number of ballots}
\label{ref;figure3}
\end{minipage}
\begin{minipage}{.5\textwidth}
  \centering
\begin{tabular}{|l |c | c|}
\hline
ballot length& certificate size& time (sec)\\
\hline
$6$&$60.2$&$140$\\
$12$&$124.0$&$298$\\
$18$&$180.5$&$325$\\
\hline
\end{tabular}
\caption{Varying length of each ballot}
\label{ref;figure4}
\end{minipage}
\end{figure}

\section{Discussion and Conclusion}
\section{Outline}\label{sec:out}


Certificable / Verifiable Computation.
\begin{itemize}
  \item programs produce results with correctness proofs
  \item much easier than, and orthogonal to, verification
  \item however need to prove that valid certificates imply valid
  results (soundness), maybe also that every correct result is
  certifiable.
  \item in particular, this is independent of the program that
  produces the results.
  \item mainly used to offload computation to untrusted clients.
  \item reliability is given by verifying the \emph{checker} rather
  than the program that carries out computation.
\end{itemize}

\noindent
Vote counting.

\begin{itemize}
  \item here, we employ certified computation with a different goal:
  vote counting
  \item difference: general public / election authority is outsourcing
  computation to us.
  \item state of the art: no verifiability, black box, sometimes not
  even open source.
  \item this is a real problem -- e.g. NSW 2012 Griffith
  \item large trust base, including to trust that the right program
  has been run!
  \item indeed in evoting research: concept of ``universal
  verifiability'' means precisely that. Is the holy grail of any
  evoting system.
  \item for vote counting, this is a paradigm shift: don't verify
  the program, but verify the checker -- down to machine level!
  \item this happens in a fully verified / verifiable environment
  \item higher guarantees by machine level verification
\end{itemize}

\noindent
Our contribution.
\begin{itemize}
  \item Have formalised STV (complex, preferential voting scheme
  used in Malta, Scotland, etc.) in HOL
  \item rule based to minimise gap between law and code
  \item Have designed a notion of certificate that establishes the
  correctness of STV counts. Think about this more \dots
  \item Have developed a verified checker
  \item Used CakeML to give correctness down to machine level
  \item smallest possible trust base: microprocessor, basic IO
  system calls
\end{itemize}


\section{Single Transferable Vote and Certification}

\section{Final Theorem}
\begin{holthmenv}
  \HOLthm[width=80]{check_countProof.check_count_compiled_thm}
\end{holthmenv}

\begin{holthmenv}
  \HOLthm[def,width=90]{check_countProg.Check_Certificate_def}
\end{holthmenv}

\section{Evaluation}
\begin{itemize}
  \item to be done.
\end{itemize}

\section{Related Work}
\begin{itemize}
  \item Verifiability and electronic voting
  \item Verified / certified computation in general
  \item CakeML stuff??

\end{itemize}

\section{Conclusion}

\bibliographystyle{splncs03}
\bibliography{paper}
\end{document}
% vim: ft=tex
